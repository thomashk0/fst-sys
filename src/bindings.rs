/* automatically generated by rust-bindgen */

pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type FILE = [u64; 27usize];
pub type fstHandle = u32;
pub const fstWriterPackType_FST_WR_PT_ZLIB: fstWriterPackType = 0;
pub const fstWriterPackType_FST_WR_PT_FASTLZ: fstWriterPackType = 1;
pub const fstWriterPackType_FST_WR_PT_LZ4: fstWriterPackType = 2;
pub type fstWriterPackType = u32;
pub const fstFileType_FST_FT_MIN: fstFileType = 0;
pub const fstFileType_FST_FT_VERILOG: fstFileType = 0;
pub const fstFileType_FST_FT_VHDL: fstFileType = 1;
pub const fstFileType_FST_FT_VERILOG_VHDL: fstFileType = 2;
pub const fstFileType_FST_FT_MAX: fstFileType = 2;
pub type fstFileType = u32;
pub const fstBlockType_FST_BL_HDR: fstBlockType = 0;
pub const fstBlockType_FST_BL_VCDATA: fstBlockType = 1;
pub const fstBlockType_FST_BL_BLACKOUT: fstBlockType = 2;
pub const fstBlockType_FST_BL_GEOM: fstBlockType = 3;
pub const fstBlockType_FST_BL_HIER: fstBlockType = 4;
pub const fstBlockType_FST_BL_VCDATA_DYN_ALIAS: fstBlockType = 5;
pub const fstBlockType_FST_BL_HIER_LZ4: fstBlockType = 6;
pub const fstBlockType_FST_BL_HIER_LZ4DUO: fstBlockType = 7;
pub const fstBlockType_FST_BL_VCDATA_DYN_ALIAS2: fstBlockType = 8;
pub const fstBlockType_FST_BL_ZWRAPPER: fstBlockType = 254;
pub const fstBlockType_FST_BL_SKIP: fstBlockType = 255;
pub type fstBlockType = u32;
pub const fstScopeType_FST_ST_MIN: fstScopeType = 0;
pub const fstScopeType_FST_ST_VCD_MODULE: fstScopeType = 0;
pub const fstScopeType_FST_ST_VCD_TASK: fstScopeType = 1;
pub const fstScopeType_FST_ST_VCD_FUNCTION: fstScopeType = 2;
pub const fstScopeType_FST_ST_VCD_BEGIN: fstScopeType = 3;
pub const fstScopeType_FST_ST_VCD_FORK: fstScopeType = 4;
pub const fstScopeType_FST_ST_VCD_GENERATE: fstScopeType = 5;
pub const fstScopeType_FST_ST_VCD_STRUCT: fstScopeType = 6;
pub const fstScopeType_FST_ST_VCD_UNION: fstScopeType = 7;
pub const fstScopeType_FST_ST_VCD_CLASS: fstScopeType = 8;
pub const fstScopeType_FST_ST_VCD_INTERFACE: fstScopeType = 9;
pub const fstScopeType_FST_ST_VCD_PACKAGE: fstScopeType = 10;
pub const fstScopeType_FST_ST_VCD_PROGRAM: fstScopeType = 11;
pub const fstScopeType_FST_ST_VHDL_ARCHITECTURE: fstScopeType = 12;
pub const fstScopeType_FST_ST_VHDL_PROCEDURE: fstScopeType = 13;
pub const fstScopeType_FST_ST_VHDL_FUNCTION: fstScopeType = 14;
pub const fstScopeType_FST_ST_VHDL_RECORD: fstScopeType = 15;
pub const fstScopeType_FST_ST_VHDL_PROCESS: fstScopeType = 16;
pub const fstScopeType_FST_ST_VHDL_BLOCK: fstScopeType = 17;
pub const fstScopeType_FST_ST_VHDL_FOR_GENERATE: fstScopeType = 18;
pub const fstScopeType_FST_ST_VHDL_IF_GENERATE: fstScopeType = 19;
pub const fstScopeType_FST_ST_VHDL_GENERATE: fstScopeType = 20;
pub const fstScopeType_FST_ST_VHDL_PACKAGE: fstScopeType = 21;
pub const fstScopeType_FST_ST_MAX: fstScopeType = 21;
pub const fstScopeType_FST_ST_GEN_ATTRBEGIN: fstScopeType = 252;
pub const fstScopeType_FST_ST_GEN_ATTREND: fstScopeType = 253;
pub const fstScopeType_FST_ST_VCD_SCOPE: fstScopeType = 254;
pub const fstScopeType_FST_ST_VCD_UPSCOPE: fstScopeType = 255;
pub type fstScopeType = u32;
pub const fstVarType_FST_VT_MIN: fstVarType = 0;
pub const fstVarType_FST_VT_VCD_EVENT: fstVarType = 0;
pub const fstVarType_FST_VT_VCD_INTEGER: fstVarType = 1;
pub const fstVarType_FST_VT_VCD_PARAMETER: fstVarType = 2;
pub const fstVarType_FST_VT_VCD_REAL: fstVarType = 3;
pub const fstVarType_FST_VT_VCD_REAL_PARAMETER: fstVarType = 4;
pub const fstVarType_FST_VT_VCD_REG: fstVarType = 5;
pub const fstVarType_FST_VT_VCD_SUPPLY0: fstVarType = 6;
pub const fstVarType_FST_VT_VCD_SUPPLY1: fstVarType = 7;
pub const fstVarType_FST_VT_VCD_TIME: fstVarType = 8;
pub const fstVarType_FST_VT_VCD_TRI: fstVarType = 9;
pub const fstVarType_FST_VT_VCD_TRIAND: fstVarType = 10;
pub const fstVarType_FST_VT_VCD_TRIOR: fstVarType = 11;
pub const fstVarType_FST_VT_VCD_TRIREG: fstVarType = 12;
pub const fstVarType_FST_VT_VCD_TRI0: fstVarType = 13;
pub const fstVarType_FST_VT_VCD_TRI1: fstVarType = 14;
pub const fstVarType_FST_VT_VCD_WAND: fstVarType = 15;
pub const fstVarType_FST_VT_VCD_WIRE: fstVarType = 16;
pub const fstVarType_FST_VT_VCD_WOR: fstVarType = 17;
pub const fstVarType_FST_VT_VCD_PORT: fstVarType = 18;
pub const fstVarType_FST_VT_VCD_SPARRAY: fstVarType = 19;
pub const fstVarType_FST_VT_VCD_REALTIME: fstVarType = 20;
pub const fstVarType_FST_VT_GEN_STRING: fstVarType = 21;
pub const fstVarType_FST_VT_SV_BIT: fstVarType = 22;
pub const fstVarType_FST_VT_SV_LOGIC: fstVarType = 23;
pub const fstVarType_FST_VT_SV_INT: fstVarType = 24;
pub const fstVarType_FST_VT_SV_SHORTINT: fstVarType = 25;
pub const fstVarType_FST_VT_SV_LONGINT: fstVarType = 26;
pub const fstVarType_FST_VT_SV_BYTE: fstVarType = 27;
pub const fstVarType_FST_VT_SV_ENUM: fstVarType = 28;
pub const fstVarType_FST_VT_SV_SHORTREAL: fstVarType = 29;
pub const fstVarType_FST_VT_MAX: fstVarType = 29;
pub type fstVarType = u32;
pub const fstVarDir_FST_VD_MIN: fstVarDir = 0;
pub const fstVarDir_FST_VD_IMPLICIT: fstVarDir = 0;
pub const fstVarDir_FST_VD_INPUT: fstVarDir = 1;
pub const fstVarDir_FST_VD_OUTPUT: fstVarDir = 2;
pub const fstVarDir_FST_VD_INOUT: fstVarDir = 3;
pub const fstVarDir_FST_VD_BUFFER: fstVarDir = 4;
pub const fstVarDir_FST_VD_LINKAGE: fstVarDir = 5;
pub const fstVarDir_FST_VD_MAX: fstVarDir = 5;
pub type fstVarDir = u32;
pub const fstHierType_FST_HT_MIN: fstHierType = 0;
pub const fstHierType_FST_HT_SCOPE: fstHierType = 0;
pub const fstHierType_FST_HT_UPSCOPE: fstHierType = 1;
pub const fstHierType_FST_HT_VAR: fstHierType = 2;
pub const fstHierType_FST_HT_ATTRBEGIN: fstHierType = 3;
pub const fstHierType_FST_HT_ATTREND: fstHierType = 4;
pub const fstHierType_FST_HT_MAX: fstHierType = 4;
pub type fstHierType = u32;
pub const fstAttrType_FST_AT_MIN: fstAttrType = 0;
pub const fstAttrType_FST_AT_MISC: fstAttrType = 0;
pub const fstAttrType_FST_AT_ARRAY: fstAttrType = 1;
pub const fstAttrType_FST_AT_ENUM: fstAttrType = 2;
pub const fstAttrType_FST_AT_PACK: fstAttrType = 3;
pub const fstAttrType_FST_AT_MAX: fstAttrType = 3;
pub type fstAttrType = u32;
pub const fstMiscType_FST_MT_MIN: fstMiscType = 0;
pub const fstMiscType_FST_MT_COMMENT: fstMiscType = 0;
pub const fstMiscType_FST_MT_ENVVAR: fstMiscType = 1;
pub const fstMiscType_FST_MT_SUPVAR: fstMiscType = 2;
pub const fstMiscType_FST_MT_PATHNAME: fstMiscType = 3;
pub const fstMiscType_FST_MT_SOURCESTEM: fstMiscType = 4;
pub const fstMiscType_FST_MT_SOURCEISTEM: fstMiscType = 5;
pub const fstMiscType_FST_MT_VALUELIST: fstMiscType = 6;
pub const fstMiscType_FST_MT_UNKNOWN: fstMiscType = 7;
pub const fstMiscType_FST_MT_MAX: fstMiscType = 7;
pub type fstMiscType = u32;
pub const fstArrayType_FST_AR_MIN: fstArrayType = 0;
pub const fstArrayType_FST_AR_NONE: fstArrayType = 0;
pub const fstArrayType_FST_AR_UNPACKED: fstArrayType = 1;
pub const fstArrayType_FST_AR_PACKED: fstArrayType = 2;
pub const fstArrayType_FST_AR_SPARSE: fstArrayType = 3;
pub const fstArrayType_FST_AR_MAX: fstArrayType = 3;
pub type fstArrayType = u32;
pub const fstEnumValueType_FST_EV_SV_INTEGER: fstEnumValueType = 0;
pub const fstEnumValueType_FST_EV_SV_BIT: fstEnumValueType = 1;
pub const fstEnumValueType_FST_EV_SV_LOGIC: fstEnumValueType = 2;
pub const fstEnumValueType_FST_EV_SV_INT: fstEnumValueType = 3;
pub const fstEnumValueType_FST_EV_SV_SHORTINT: fstEnumValueType = 4;
pub const fstEnumValueType_FST_EV_SV_LONGINT: fstEnumValueType = 5;
pub const fstEnumValueType_FST_EV_SV_BYTE: fstEnumValueType = 6;
pub const fstEnumValueType_FST_EV_SV_UNSIGNED_INTEGER: fstEnumValueType = 7;
pub const fstEnumValueType_FST_EV_SV_UNSIGNED_BIT: fstEnumValueType = 8;
pub const fstEnumValueType_FST_EV_SV_UNSIGNED_LOGIC: fstEnumValueType = 9;
pub const fstEnumValueType_FST_EV_SV_UNSIGNED_INT: fstEnumValueType = 10;
pub const fstEnumValueType_FST_EV_SV_UNSIGNED_SHORTINT: fstEnumValueType = 11;
pub const fstEnumValueType_FST_EV_SV_UNSIGNED_LONGINT: fstEnumValueType = 12;
pub const fstEnumValueType_FST_EV_SV_UNSIGNED_BYTE: fstEnumValueType = 13;
pub const fstEnumValueType_FST_EV_MAX: fstEnumValueType = 13;
pub type fstEnumValueType = u32;
pub const fstPackType_FST_PT_NONE: fstPackType = 0;
pub const fstPackType_FST_PT_UNPACKED: fstPackType = 1;
pub const fstPackType_FST_PT_PACKED: fstPackType = 2;
pub const fstPackType_FST_PT_TAGGED_PACKED: fstPackType = 3;
pub const fstPackType_FST_PT_MAX: fstPackType = 3;
pub type fstPackType = u32;
pub const fstSupplementalVarType_FST_SVT_MIN: fstSupplementalVarType = 0;
pub const fstSupplementalVarType_FST_SVT_NONE: fstSupplementalVarType = 0;
pub const fstSupplementalVarType_FST_SVT_VHDL_SIGNAL: fstSupplementalVarType = 1;
pub const fstSupplementalVarType_FST_SVT_VHDL_VARIABLE: fstSupplementalVarType = 2;
pub const fstSupplementalVarType_FST_SVT_VHDL_CONSTANT: fstSupplementalVarType = 3;
pub const fstSupplementalVarType_FST_SVT_VHDL_FILE: fstSupplementalVarType = 4;
pub const fstSupplementalVarType_FST_SVT_VHDL_MEMORY: fstSupplementalVarType = 5;
pub const fstSupplementalVarType_FST_SVT_MAX: fstSupplementalVarType = 5;
pub type fstSupplementalVarType = u32;
pub const fstSupplementalDataType_FST_SDT_MIN: fstSupplementalDataType = 0;
pub const fstSupplementalDataType_FST_SDT_NONE: fstSupplementalDataType = 0;
pub const fstSupplementalDataType_FST_SDT_VHDL_BOOLEAN: fstSupplementalDataType = 1;
pub const fstSupplementalDataType_FST_SDT_VHDL_BIT: fstSupplementalDataType = 2;
pub const fstSupplementalDataType_FST_SDT_VHDL_BIT_VECTOR: fstSupplementalDataType = 3;
pub const fstSupplementalDataType_FST_SDT_VHDL_STD_ULOGIC: fstSupplementalDataType = 4;
pub const fstSupplementalDataType_FST_SDT_VHDL_STD_ULOGIC_VECTOR: fstSupplementalDataType = 5;
pub const fstSupplementalDataType_FST_SDT_VHDL_STD_LOGIC: fstSupplementalDataType = 6;
pub const fstSupplementalDataType_FST_SDT_VHDL_STD_LOGIC_VECTOR: fstSupplementalDataType = 7;
pub const fstSupplementalDataType_FST_SDT_VHDL_UNSIGNED: fstSupplementalDataType = 8;
pub const fstSupplementalDataType_FST_SDT_VHDL_SIGNED: fstSupplementalDataType = 9;
pub const fstSupplementalDataType_FST_SDT_VHDL_INTEGER: fstSupplementalDataType = 10;
pub const fstSupplementalDataType_FST_SDT_VHDL_REAL: fstSupplementalDataType = 11;
pub const fstSupplementalDataType_FST_SDT_VHDL_NATURAL: fstSupplementalDataType = 12;
pub const fstSupplementalDataType_FST_SDT_VHDL_POSITIVE: fstSupplementalDataType = 13;
pub const fstSupplementalDataType_FST_SDT_VHDL_TIME: fstSupplementalDataType = 14;
pub const fstSupplementalDataType_FST_SDT_VHDL_CHARACTER: fstSupplementalDataType = 15;
pub const fstSupplementalDataType_FST_SDT_VHDL_STRING: fstSupplementalDataType = 16;
pub const fstSupplementalDataType_FST_SDT_MAX: fstSupplementalDataType = 16;
pub const fstSupplementalDataType_FST_SDT_SVT_SHIFT_COUNT: fstSupplementalDataType = 10;
pub const fstSupplementalDataType_FST_SDT_ABS_MAX: fstSupplementalDataType = 1023;
pub type fstSupplementalDataType = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fstHier {
    pub htyp: ::std::os::raw::c_uchar,
    pub u: fstHier__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union fstHier__bindgen_ty_1 {
    pub scope: fstHier__bindgen_ty_1_fstHierScope,
    pub var: fstHier__bindgen_ty_1_fstHierVar,
    pub attr: fstHier__bindgen_ty_1_fstHierAttr,
    _bindgen_union_align: [u64; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fstHier__bindgen_ty_1_fstHierScope {
    pub typ: ::std::os::raw::c_uchar,
    pub name: *const ::std::os::raw::c_char,
    pub component: *const ::std::os::raw::c_char,
    pub name_length: u32,
    pub component_length: u32,
}
#[test]
fn bindgen_test_layout_fstHier__bindgen_ty_1_fstHierScope() {
    assert_eq!(
        ::std::mem::size_of::<fstHier__bindgen_ty_1_fstHierScope>(),
        32usize,
        concat!("Size of: ", stringify!(fstHier__bindgen_ty_1_fstHierScope))
    );
    assert_eq!(
        ::std::mem::align_of::<fstHier__bindgen_ty_1_fstHierScope>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(fstHier__bindgen_ty_1_fstHierScope)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fstHier__bindgen_ty_1_fstHierScope>())).typ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fstHier__bindgen_ty_1_fstHierScope),
            "::",
            stringify!(typ)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fstHier__bindgen_ty_1_fstHierScope>())).name as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fstHier__bindgen_ty_1_fstHierScope),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fstHier__bindgen_ty_1_fstHierScope>())).component as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fstHier__bindgen_ty_1_fstHierScope),
            "::",
            stringify!(component)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fstHier__bindgen_ty_1_fstHierScope>())).name_length as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fstHier__bindgen_ty_1_fstHierScope),
            "::",
            stringify!(name_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fstHier__bindgen_ty_1_fstHierScope>())).component_length
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(fstHier__bindgen_ty_1_fstHierScope),
            "::",
            stringify!(component_length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fstHier__bindgen_ty_1_fstHierVar {
    pub typ: ::std::os::raw::c_uchar,
    pub direction: ::std::os::raw::c_uchar,
    pub svt_workspace: ::std::os::raw::c_uchar,
    pub sdt_workspace: ::std::os::raw::c_uchar,
    pub sxt_workspace: ::std::os::raw::c_uint,
    pub name: *const ::std::os::raw::c_char,
    pub length: u32,
    pub handle: fstHandle,
    pub name_length: u32,
    pub is_alias: u8,
}
#[test]
fn bindgen_test_layout_fstHier__bindgen_ty_1_fstHierVar() {
    assert_eq!(
        ::std::mem::size_of::<fstHier__bindgen_ty_1_fstHierVar>(),
        32usize,
        concat!("Size of: ", stringify!(fstHier__bindgen_ty_1_fstHierVar))
    );
    assert_eq!(
        ::std::mem::align_of::<fstHier__bindgen_ty_1_fstHierVar>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(fstHier__bindgen_ty_1_fstHierVar)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fstHier__bindgen_ty_1_fstHierVar>())).typ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fstHier__bindgen_ty_1_fstHierVar),
            "::",
            stringify!(typ)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fstHier__bindgen_ty_1_fstHierVar>())).direction as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(fstHier__bindgen_ty_1_fstHierVar),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fstHier__bindgen_ty_1_fstHierVar>())).svt_workspace as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(fstHier__bindgen_ty_1_fstHierVar),
            "::",
            stringify!(svt_workspace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fstHier__bindgen_ty_1_fstHierVar>())).sdt_workspace as *const _
                as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(fstHier__bindgen_ty_1_fstHierVar),
            "::",
            stringify!(sdt_workspace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fstHier__bindgen_ty_1_fstHierVar>())).sxt_workspace as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fstHier__bindgen_ty_1_fstHierVar),
            "::",
            stringify!(sxt_workspace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fstHier__bindgen_ty_1_fstHierVar>())).name as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fstHier__bindgen_ty_1_fstHierVar),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fstHier__bindgen_ty_1_fstHierVar>())).length as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fstHier__bindgen_ty_1_fstHierVar),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fstHier__bindgen_ty_1_fstHierVar>())).handle as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(fstHier__bindgen_ty_1_fstHierVar),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fstHier__bindgen_ty_1_fstHierVar>())).name_length as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fstHier__bindgen_ty_1_fstHierVar),
            "::",
            stringify!(name_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fstHier__bindgen_ty_1_fstHierVar>())).is_alias as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(fstHier__bindgen_ty_1_fstHierVar),
            "::",
            stringify!(is_alias)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fstHier__bindgen_ty_1_fstHierAttr {
    pub typ: ::std::os::raw::c_uchar,
    pub subtype: ::std::os::raw::c_uchar,
    pub name: *const ::std::os::raw::c_char,
    pub arg: u64,
    pub arg_from_name: u64,
    pub name_length: u32,
}
#[test]
fn bindgen_test_layout_fstHier__bindgen_ty_1_fstHierAttr() {
    assert_eq!(
        ::std::mem::size_of::<fstHier__bindgen_ty_1_fstHierAttr>(),
        40usize,
        concat!("Size of: ", stringify!(fstHier__bindgen_ty_1_fstHierAttr))
    );
    assert_eq!(
        ::std::mem::align_of::<fstHier__bindgen_ty_1_fstHierAttr>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(fstHier__bindgen_ty_1_fstHierAttr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fstHier__bindgen_ty_1_fstHierAttr>())).typ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fstHier__bindgen_ty_1_fstHierAttr),
            "::",
            stringify!(typ)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fstHier__bindgen_ty_1_fstHierAttr>())).subtype as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(fstHier__bindgen_ty_1_fstHierAttr),
            "::",
            stringify!(subtype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fstHier__bindgen_ty_1_fstHierAttr>())).name as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fstHier__bindgen_ty_1_fstHierAttr),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fstHier__bindgen_ty_1_fstHierAttr>())).arg as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fstHier__bindgen_ty_1_fstHierAttr),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fstHier__bindgen_ty_1_fstHierAttr>())).arg_from_name as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fstHier__bindgen_ty_1_fstHierAttr),
            "::",
            stringify!(arg_from_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fstHier__bindgen_ty_1_fstHierAttr>())).name_length as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fstHier__bindgen_ty_1_fstHierAttr),
            "::",
            stringify!(name_length)
        )
    );
}
#[test]
fn bindgen_test_layout_fstHier__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<fstHier__bindgen_ty_1>(),
        40usize,
        concat!("Size of: ", stringify!(fstHier__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<fstHier__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(fstHier__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fstHier__bindgen_ty_1>())).scope as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fstHier__bindgen_ty_1),
            "::",
            stringify!(scope)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fstHier__bindgen_ty_1>())).var as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fstHier__bindgen_ty_1),
            "::",
            stringify!(var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fstHier__bindgen_ty_1>())).attr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fstHier__bindgen_ty_1),
            "::",
            stringify!(attr)
        )
    );
}
#[test]
fn bindgen_test_layout_fstHier() {
    assert_eq!(
        ::std::mem::size_of::<fstHier>(),
        48usize,
        concat!("Size of: ", stringify!(fstHier))
    );
    assert_eq!(
        ::std::mem::align_of::<fstHier>(),
        8usize,
        concat!("Alignment of ", stringify!(fstHier))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fstHier>())).htyp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fstHier),
            "::",
            stringify!(htyp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fstHier>())).u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fstHier),
            "::",
            stringify!(u)
        )
    );
}
extern "C" {
    pub fn fstReaderClose(ctx: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn fstReaderClrFacProcessMask(ctx: *mut ::std::os::raw::c_void, facidx: fstHandle);
}
extern "C" {
    pub fn fstReaderClrFacProcessMaskAll(ctx: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn fstReaderGetAliasCount(ctx: *mut ::std::os::raw::c_void) -> u64;
}
extern "C" {
    pub fn fstReaderGetCurrentFlatScope(
        ctx: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fstReaderGetCurrentScopeUserInfo(
        ctx: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn fstReaderGetCurrentScopeLen(ctx: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstReaderGetDateString(
        ctx: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fstReaderGetDoubleEndianMatchState(
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstReaderGetDumpActivityChangeTime(ctx: *mut ::std::os::raw::c_void, idx: u32) -> u64;
}
extern "C" {
    pub fn fstReaderGetDumpActivityChangeValue(
        ctx: *mut ::std::os::raw::c_void,
        idx: u32,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn fstReaderGetEndTime(ctx: *mut ::std::os::raw::c_void) -> u64;
}
extern "C" {
    pub fn fstReaderGetFacProcessMask(
        ctx: *mut ::std::os::raw::c_void,
        facidx: fstHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstReaderGetFileType(ctx: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstReaderGetFseekFailed(ctx: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstReaderGetMaxHandle(ctx: *mut ::std::os::raw::c_void) -> fstHandle;
}
extern "C" {
    pub fn fstReaderGetMemoryUsedByWriter(ctx: *mut ::std::os::raw::c_void) -> u64;
}
extern "C" {
    pub fn fstReaderGetNumberDumpActivityChanges(ctx: *mut ::std::os::raw::c_void) -> u32;
}
extern "C" {
    pub fn fstReaderGetScopeCount(ctx: *mut ::std::os::raw::c_void) -> u64;
}
extern "C" {
    pub fn fstReaderGetStartTime(ctx: *mut ::std::os::raw::c_void) -> u64;
}
extern "C" {
    pub fn fstReaderGetTimescale(ctx: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_schar;
}
extern "C" {
    pub fn fstReaderGetTimezero(ctx: *mut ::std::os::raw::c_void) -> i64;
}
extern "C" {
    pub fn fstReaderGetValueChangeSectionCount(ctx: *mut ::std::os::raw::c_void) -> u64;
}
extern "C" {
    pub fn fstReaderGetValueFromHandleAtTime(
        ctx: *mut ::std::os::raw::c_void,
        tim: u64,
        facidx: fstHandle,
        buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fstReaderGetVarCount(ctx: *mut ::std::os::raw::c_void) -> u64;
}
extern "C" {
    pub fn fstReaderGetVersionString(
        ctx: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fstReaderIterateHier(ctx: *mut ::std::os::raw::c_void) -> *mut fstHier;
}
extern "C" {
    pub fn fstReaderIterateHierRewind(ctx: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstReaderIterBlocks(
        ctx: *mut ::std::os::raw::c_void,
        value_change_callback: ::std::option::Option<
            unsafe extern "C" fn(
                user_callback_data_pointer: *mut ::std::os::raw::c_void,
                time: u64,
                facidx: fstHandle,
                value: *const ::std::os::raw::c_uchar,
            ),
        >,
        user_callback_data_pointer: *mut ::std::os::raw::c_void,
        vcdhandle: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstReaderIterBlocks2(
        ctx: *mut ::std::os::raw::c_void,
        value_change_callback: ::std::option::Option<
            unsafe extern "C" fn(
                user_callback_data_pointer: *mut ::std::os::raw::c_void,
                time: u64,
                facidx: fstHandle,
                value: *const ::std::os::raw::c_uchar,
            ),
        >,
        value_change_callback_varlen: ::std::option::Option<
            unsafe extern "C" fn(
                user_callback_data_pointer: *mut ::std::os::raw::c_void,
                time: u64,
                facidx: fstHandle,
                value: *const ::std::os::raw::c_uchar,
                len: u32,
            ),
        >,
        user_callback_data_pointer: *mut ::std::os::raw::c_void,
        vcdhandle: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstReaderIterBlocksSetNativeDoublesOnCallback(
        ctx: *mut ::std::os::raw::c_void,
        enable: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn fstReaderOpen(nam: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn fstReaderOpenForUtilitiesOnly() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn fstReaderPopScope(ctx: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fstReaderProcessHier(
        ctx: *mut ::std::os::raw::c_void,
        vcdhandle: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstReaderPushScope(
        ctx: *mut ::std::os::raw::c_void,
        nam: *const ::std::os::raw::c_char,
        user_info: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fstReaderResetScope(ctx: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn fstReaderSetFacProcessMask(ctx: *mut ::std::os::raw::c_void, facidx: fstHandle);
}
extern "C" {
    pub fn fstReaderSetFacProcessMaskAll(ctx: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn fstReaderSetLimitTimeRange(
        ctx: *mut ::std::os::raw::c_void,
        start_time: u64,
        end_time: u64,
    );
}
extern "C" {
    pub fn fstReaderSetUnlimitedTimeRange(ctx: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn fstReaderSetVcdExtensions(
        ctx: *mut ::std::os::raw::c_void,
        enable: ::std::os::raw::c_int,
    );
}
